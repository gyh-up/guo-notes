import{_ as s,c as n,o as a,a as l}from"./app.8b821eb2.js";const b=JSON.parse('{"title":"\u95EE\u9898\uFF1A\u56DE\u6587\u94FE\u8868","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u65B9\u6CD5\u4E00\uFF1A\u5B58\u5165\u6570\u7EC4","slug":"\u65B9\u6CD5\u4E00\uFF1A\u5B58\u5165\u6570\u7EC4","link":"#\u65B9\u6CD5\u4E00\uFF1A\u5B58\u5165\u6570\u7EC4","children":[]},{"level":2,"title":"\u65B9\u6CD5\u4E8C\uFF1A\u53CC\u6307\u9488","slug":"\u65B9\u6CD5\u4E8C\uFF1A\u53CC\u6307\u9488","link":"#\u65B9\u6CD5\u4E8C\uFF1A\u53CC\u6307\u9488","children":[]},{"level":2,"title":"\u65B9\u6CD5\u4E09\uFF1A\u9012\u5F52/\u6808","slug":"\u65B9\u6CD5\u4E09\uFF1A\u9012\u5F52-\u6808","link":"#\u65B9\u6CD5\u4E09\uFF1A\u9012\u5F52-\u6808","children":[]}],"relativePath":"classify/algorithm/title/leetcode-234.md","lastUpdated":1668481515000}'),p={name:"classify/algorithm/title/leetcode-234.md"},e=l(`<h1 id="\u95EE\u9898\uFF1A\u56DE\u6587\u94FE\u8868" tabindex="-1">\u95EE\u9898\uFF1A\u56DE\u6587\u94FE\u8868 <a class="header-anchor" href="#\u95EE\u9898\uFF1A\u56DE\u6587\u94FE\u8868" aria-hidden="true">#</a></h1><p><a href="/guo-notes/classify/algorithm/\u57FA\u7840\u6570\u636E\u7ED3\u6784-\u94FE\u8868.html">\u94FE\u8868</a> | <a href="/guo-notes/classify/algorithm/\u6280\u5DE7-\u53CC\u6307\u9488.html">\u53CC\u6307\u9488</a> | <a href="/guo-notes/classify/algorithm/\u57FA\u7840\u6570\u636E\u7ED3\u6784-\u6808.html">\u6808</a> | <a href="/guo-notes/classify/algorithm/\u7B97\u6CD5-\u9012\u5F52.html">\u9012\u5F52</a></p><p>\u7ED9\u4F60\u4E00\u4E2A\u5355\u94FE\u8868\u7684\u5934\u8282\u70B9 head \uFF0C\u8BF7\u4F60\u5224\u65AD\u8BE5\u94FE\u8868\u662F\u5426\u4E3A\u56DE\u6587\u94FE\u8868\u3002\u5982\u679C\u662F\uFF0C\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" alt="img"></p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">\u8F93\u5165\uFF1Ahead = [1,2,2,1]</span></span>
<span class="line"><span style="color:#A6ACCD;">\u8F93\u51FA\uFF1Atrue</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" alt="img"></p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">\u8F93\u5165\uFF1Ahead = [1,2]</span></span>
<span class="line"><span style="color:#A6ACCD;">\u8F93\u51FA\uFF1Afalse</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u63D0\u793A\uFF1A</p><p>\u94FE\u8868\u4E2D\u8282\u70B9\u6570\u76EE\u5728\u8303\u56F4[1, 105] \u5185 <code>0 &lt;= Node.val &lt;= 9</code></p><p><strong>\u8FDB\u9636\uFF1A\u4F60\u80FD\u5426\u7528 <code>O(n)</code> \u65F6\u95F4\u590D\u6742\u5EA6\u548C <code>O(1)</code> \u7A7A\u95F4\u590D\u6742\u5EA6\u89E3\u51B3\u6B64\u9898\uFF1F</strong></p><h2 id="\u65B9\u6CD5\u4E00\uFF1A\u5B58\u5165\u6570\u7EC4" tabindex="-1">\u65B9\u6CD5\u4E00\uFF1A\u5B58\u5165\u6570\u7EC4 <a class="header-anchor" href="#\u65B9\u6CD5\u4E00\uFF1A\u5B58\u5165\u6570\u7EC4" aria-hidden="true">#</a></h2><p>\u5B58\u5165\u6570\u7EC4\u540E\uFF0C\u5C06\u7B2C i \u4E2A\u5143\u7D20 \u548C \u7B2C n-1-i \u4E2A\u5143\u7D20\u505A\u6BD4\u8F83</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">func isPalindrome(head *ListNode) bool {</span></span>
<span class="line"><span style="color:#A6ACCD;">    vals := []int{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u5FAA\u73AF\uFF0C\u5B58\u5165\u6570\u7EC4</span></span>
<span class="line"><span style="color:#A6ACCD;">    for ; head != nil; head = head.Next {</span></span>
<span class="line"><span style="color:#A6ACCD;">        vals = append(vals, head.Val)</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    n := len(vals)</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u5FAA\u73AF\uFF0C\u5C06\u7B2C i \u4E2A\u5143\u7D20 \u548C \u7B2C n-1-i \u4E2A\u5143\u7D20\u505A\u6BD4\u8F83</span></span>
<span class="line"><span style="color:#A6ACCD;">    for i, v := range vals[:n/2] {</span></span>
<span class="line"><span style="color:#A6ACCD;">        if v != vals[n-1-i] {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return false</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    return true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="\u65B9\u6CD5\u4E8C\uFF1A\u53CC\u6307\u9488" tabindex="-1">\u65B9\u6CD5\u4E8C\uFF1A\u53CC\u6307\u9488 <a class="header-anchor" href="#\u65B9\u6CD5\u4E8C\uFF1A\u53CC\u6307\u9488" aria-hidden="true">#</a></h2><p>B\u7AD9\u76F8\u5173\u89C6\u9891\u89E3\u6790\uFF1A<a href="https://www.bilibili.com/video/BV1eg411w7gn/?p=17&amp;spm_id_from=pageDriver&amp;vd_source=2365b1baf9eff4a0af3aabdb705341bd" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1eg411w7gn/?p=17&amp;spm_id_from=pageDriver&amp;vd_source=2365b1baf9eff4a0af3aabdb705341bd</a></p><div class="language-go line-numbers-mode"><button class="copy"></button><span class="lang">go</span><pre><code><span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#676E95;"> * type ListNode struct {</span></span>
<span class="line"><span style="color:#676E95;"> *     Val int</span></span>
<span class="line"><span style="color:#676E95;"> *     Next *ListNode</span></span>
<span class="line"><span style="color:#676E95;"> * }</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isPalindrome</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">head </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u5B9A\u4E49\u5FEB\u6162\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">    fastPtr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> slowPtr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> head</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> head</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u6307\u9488\u79FB\u52A8\u8FC7</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> fastPtr </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> fastPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        fastPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fastPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">        slowPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> slowPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u8282\u70B9\u6570\u91CF\u5947\u5076\u5224\u65AD\u5904\u7406</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> fastPtr </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        slowPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> slowPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u540E\u534A\u6BB5\u94FE\u8868\u8FDB\u884C\u53CD\u8F6C</span></span>
<span class="line"><span style="color:#A6ACCD;">    slowPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reverseList</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">slowPtr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    fastPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> head</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">// \u6BD4\u8F83</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> slowPtr </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> slowPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Val </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> fastPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Val </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        fastPtr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> slowPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fastPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> slowPtr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reverseList</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">head </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u5B9A\u4E49\u4E0A\u4E00\u8282\u70B9\u548C\u4E0B\u4E00\u8282\u70B9</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> pre_node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_node </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u5224\u65AD\u662F\u5426\u5230\u94FE\u8868\u5C3E\u90E8</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> head </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">// \u63D0\u524D\u4FDD\u5B58\u4E0B\u4E00\u8282\u70B9</span></span>
<span class="line"><span style="color:#A6ACCD;">        next_node </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">// \u5F53\u524D\u8282\u70B9\u6307\u5411\u4E0A\u4E00\u8282\u70B9\uFF0C\u5982\u679C\u662F\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF0C\u5C06\u4F1A\u6307\u5411\u4E00\u4E2A\u7A7A\u8282\u70B9</span></span>
<span class="line"><span style="color:#A6ACCD;">        head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pre_node</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">// \u8282\u70B9\u5411\u540E\u79FB\u52A8</span></span>
<span class="line"><span style="color:#A6ACCD;">        pre_node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> head </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> head</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next_node</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> pre_node</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="\u65B9\u6CD5\u4E09\uFF1A\u9012\u5F52-\u6808" tabindex="-1">\u65B9\u6CD5\u4E09\uFF1A\u9012\u5F52/\u6808 <a class="header-anchor" href="#\u65B9\u6CD5\u4E09\uFF1A\u9012\u5F52-\u6808" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">/**</span></span>
<span class="line"><span style="color:#A6ACCD;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#A6ACCD;"> * type ListNode struct {</span></span>
<span class="line"><span style="color:#A6ACCD;"> *     Val int</span></span>
<span class="line"><span style="color:#A6ACCD;"> *     Next *ListNode</span></span>
<span class="line"><span style="color:#A6ACCD;"> * }</span></span>
<span class="line"><span style="color:#A6ACCD;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">var frontPointer *ListNode</span></span>
<span class="line"><span style="color:#A6ACCD;">func isPalindrome(head *ListNode) bool {</span></span>
<span class="line"><span style="color:#A6ACCD;">    frontPointer = head</span></span>
<span class="line"><span style="color:#A6ACCD;">    return recursivelyCheck(head)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">func recursivelyCheck(curNode *ListNode) bool {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if curNode != nil {</span></span>
<span class="line"><span style="color:#A6ACCD;">        if !recursivelyCheck(curNode.Next) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return false</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        if curNode.Val != frontPointer.Val {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return false</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        frontPointer = frontPointer.Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    return true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,20),o=[e];function r(c,t,i,D,A,C){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{b as __pageData,u as default};
