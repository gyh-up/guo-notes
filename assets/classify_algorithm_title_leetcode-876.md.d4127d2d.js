import{_ as s,c as n,o as a,a as l}from"./app.a231f820.js";const F=JSON.parse('{"title":"\u95EE\u9898\uFF1A\u94FE\u8868\u7684\u4E2D\u95F4\u8282\u70B9","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u65B9\u6CD5\u4E00\uFF1A\u904D\u5386\u6CD5","slug":"\u65B9\u6CD5\u4E00\uFF1A\u904D\u5386\u6CD5","link":"#\u65B9\u6CD5\u4E00\uFF1A\u904D\u5386\u6CD5","children":[]},{"level":2,"title":"\u65B9\u6CD5\u4E8C\uFF1A\u5FEB\u6162\u6307\u9488","slug":"\u65B9\u6CD5\u4E8C\uFF1A\u5FEB\u6162\u6307\u9488","link":"#\u65B9\u6CD5\u4E8C\uFF1A\u5FEB\u6162\u6307\u9488","children":[]}],"relativePath":"classify/algorithm/title/leetcode-876.md","lastUpdated":1668581593000}'),p={name:"classify/algorithm/title/leetcode-876.md"},e=l(`<h1 id="\u95EE\u9898\uFF1A\u94FE\u8868\u7684\u4E2D\u95F4\u8282\u70B9" tabindex="-1">\u95EE\u9898\uFF1A\u94FE\u8868\u7684\u4E2D\u95F4\u8282\u70B9 <a class="header-anchor" href="#\u95EE\u9898\uFF1A\u94FE\u8868\u7684\u4E2D\u95F4\u8282\u70B9" aria-hidden="true">#</a></h1><p><a href="/guo-notes/classify/algorithm/\u57FA\u7840\u6570\u636E\u7ED3\u6784-\u94FE\u8868.html">\u94FE\u8868</a> | <a href="/guo-notes/classify/algorithm/\u6280\u5DE7-\u53CC\u6307\u9488.html">\u53CC\u6307\u9488</a></p><p>\u7ED9\u5B9A\u4E00\u4E2A\u5934\u7ED3\u70B9\u4E3A <code>head</code> \u7684\u975E\u7A7A\u5355\u94FE\u8868\uFF0C\u8FD4\u56DE\u94FE\u8868\u7684\u4E2D\u95F4\u7ED3\u70B9\u3002</p><p>\u5982\u679C\u6709\u4E24\u4E2A\u4E2D\u95F4\u7ED3\u70B9\uFF0C\u5219\u8FD4\u56DE\u7B2C\u4E8C\u4E2A\u4E2D\u95F4\u7ED3\u70B9\u3002</p><h2 id="\u65B9\u6CD5\u4E00\uFF1A\u904D\u5386\u6CD5" tabindex="-1">\u65B9\u6CD5\u4E00\uFF1A\u904D\u5386\u6CD5 <a class="header-anchor" href="#\u65B9\u6CD5\u4E00\uFF1A\u904D\u5386\u6CD5" aria-hidden="true">#</a></h2><p>\u5148\u5FAA\u73AF\u83B7\u53D6\u94FE\u8868\u7684\u957F\u5EA6\uFF0C\u7136\u540E\u6839\u636E\u94FE\u8868\u957F\u5EA6\u83B7\u53D6\u4E2D\u95F4\u8282\u70B9</p><div class="language-go line-numbers-mode"><button class="copy"></button><span class="lang">go</span><pre><code><span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#676E95;"> * type ListNode struct {</span></span>
<span class="line"><span style="color:#676E95;"> *     Val int</span></span>
<span class="line"><span style="color:#676E95;"> *     Next *ListNode</span></span>
<span class="line"><span style="color:#676E95;"> * }</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">middleNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">head </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u5B9A\u4E49\u8F85\u52A9\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">    currentNode </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> head</span></span>
<span class="line"><span style="color:#A6ACCD;">    len </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u8BA1\u7B97\u94FE\u8868\u957F\u5EA6</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> currentNode </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        len </span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#A6ACCD;">        currentNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">// \u83B7\u53D6\u4E2D\u95F4\u8282\u70B9</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        head </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> head</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="\u65B9\u6CD5\u4E8C\uFF1A\u5FEB\u6162\u6307\u9488" tabindex="-1">\u65B9\u6CD5\u4E8C\uFF1A\u5FEB\u6162\u6307\u9488 <a class="header-anchor" href="#\u65B9\u6CD5\u4E8C\uFF1A\u5FEB\u6162\u6307\u9488" aria-hidden="true">#</a></h2><p>\u5FEB\u6307\u9488\u6BCF\u6B21\u79FB\u52A8\u4E24\u6B65\uFF0C\u6162\u6307\u9488\u6BCF\u6B21\u79FB\u52A8\u4E00\u6B65\uFF0C\u5F53\u5FEB\u6307\u9488\u5230\u8FBE\u94FE\u8868\u7ED3\u5C3E\u65F6\uFF0C\u6162\u6307\u9488\u521A\u597D\u5230\u8FBE\u4E2D\u95F4\u8282\u70B9\u3002</p><div class="language-go line-numbers-mode"><button class="copy"></button><span class="lang">go</span><pre><code><span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#676E95;"> * type ListNode struct {</span></span>
<span class="line"><span style="color:#676E95;"> *     Val int</span></span>
<span class="line"><span style="color:#676E95;"> *     Next *ListNode</span></span>
<span class="line"><span style="color:#676E95;"> * }</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">middleNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">head </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ListNode </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u5B9A\u4E49\u5FEB\u6162\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">    slowNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fastNode </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> head</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> head</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// \u5FEB\u6307\u9488\u6BCF\u6B21\u79FB\u52A8\u4E24\u6B65\uFF0C\u6162\u6307\u9488\u6BCF\u6B21\u79FB\u52A8\u4E00\u6B65</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> fastNode </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> fastNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        fastNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> slowNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fastNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> slowNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Next</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> slowNode</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,10),o=[e];function r(c,t,D,i,y,C){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
