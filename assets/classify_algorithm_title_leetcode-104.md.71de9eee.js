import{_ as s,c as n,o as a,a as l}from"./app.b8d26054.js";const F=JSON.parse('{"title":"\u95EE\u9898\uFF1A\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u65B9\u6CD5\u4E00\uFF1A\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22","slug":"\u65B9\u6CD5\u4E00\uFF1A\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22","link":"#\u65B9\u6CD5\u4E00\uFF1A\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22","children":[]},{"level":2,"title":"\u65B9\u6CD5\u4E8C\uFF1A\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22","slug":"\u65B9\u6CD5\u4E8C\uFF1A\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22","link":"#\u65B9\u6CD5\u4E8C\uFF1A\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22","children":[]}],"relativePath":"classify/algorithm/title/leetcode-104.md","lastUpdated":1669113805000}'),p={name:"classify/algorithm/title/leetcode-104.md"},e=l(`<h1 id="\u95EE\u9898\uFF1A\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6" tabindex="-1">\u95EE\u9898\uFF1A\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6 <a class="header-anchor" href="#\u95EE\u9898\uFF1A\u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6" aria-hidden="true">#</a></h1><p><a href="/guo-notes/classify/algorithm/\u57FA\u7840\u6570\u636E\u7ED3\u6784-\u6811.html">\u6811</a> | <a href="/guo-notes/classify/algorithm/\u57FA\u7840\u6570\u636E\u7ED3\u6784-\u6808.html">\u6808</a> | <a href="/guo-notes/classify/algorithm/\u7B97\u6CD5-\u9012\u5F52.html">\u9012\u5F52</a> | <a href="/guo-notes/classify/algorithm/\u7B97\u6CD5-\u8FED\u4EE3.html">\u8FED\u4EE3</a> | <a href="/guo-notes/classify/algorithm/\u7B97\u6CD5-\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22.html">\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22</a> | <a href="/guo-notes/classify/algorithm/\u7B97\u6CD5-\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22.html">\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22</a></p><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811\uFF0C\u627E\u51FA\u5176\u6700\u5927\u6DF1\u5EA6\u3002</p><p>\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\u4E3A\u6839\u8282\u70B9\u5230\u6700\u8FDC\u53F6\u5B50\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84\u4E0A\u7684\u8282\u70B9\u6570\u3002</p><p><strong>\u8BF4\u660E:</strong> \u53F6\u5B50\u8282\u70B9\u662F\u6307\u6CA1\u6709\u5B50\u8282\u70B9\u7684\u8282\u70B9\u3002</p><p><strong>\u793A\u4F8B\uFF1A</strong> \u7ED9\u5B9A\u4E8C\u53C9\u6811 <code>[3,9,20,null,null,15,7]</code>\uFF0C</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">    3</span></span>
<span class="line"><span style="color:#A6ACCD;">   / \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  9  20</span></span>
<span class="line"><span style="color:#A6ACCD;">    /  \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   15   7</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD4\u56DE\u5B83\u7684\u6700\u5927\u6DF1\u5EA6 3 \u3002</p><h2 id="\u65B9\u6CD5\u4E00\uFF1A\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22" tabindex="-1">\u65B9\u6CD5\u4E00\uFF1A\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22 <a class="header-anchor" href="#\u65B9\u6CD5\u4E00\uFF1A\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button class="copy"></button><span class="lang">go</span><pre><code><span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#676E95;"> * type TreeNode struct {</span></span>
<span class="line"><span style="color:#676E95;"> *     Val int</span></span>
<span class="line"><span style="color:#676E95;"> *     Left *TreeNode</span></span>
<span class="line"><span style="color:#676E95;"> *     Right *TreeNode</span></span>
<span class="line"><span style="color:#676E95;"> * }</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#676E95;">// 1\u3001\u5F53\u524D\u8282\u70B9\u7684\u6DF1\u5EA6\u4E3A \u5DE6\u53F3\u5B69\u5B50\u8282\u70B9\u6DF1\u5EA6\u7684\u6700\u5927\u503C+1</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">maxDepth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">root </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">TreeNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> root </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">maxDepth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Left</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">maxDepth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Right</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="\u65B9\u6CD5\u4E8C\uFF1A\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22" tabindex="-1">\u65B9\u6CD5\u4E8C\uFF1A\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22 <a class="header-anchor" href="#\u65B9\u6CD5\u4E8C\uFF1A\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button class="copy"></button><span class="lang">go</span><pre><code><span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#676E95;"> * type TreeNode struct {</span></span>
<span class="line"><span style="color:#676E95;"> *     Val int</span></span>
<span class="line"><span style="color:#676E95;"> *     Left *TreeNode</span></span>
<span class="line"><span style="color:#676E95;"> *     Right *TreeNode</span></span>
<span class="line"><span style="color:#676E95;"> * }</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">maxDepth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">root </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">TreeNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> root </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">[]*</span><span style="color:#A6ACCD;">TreeNode</span></span>
<span class="line"><span style="color:#A6ACCD;">    stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    depth </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">// 1\u3001\u56E0\u4E3A\u540E\u7EED\u7684\u5B69\u5B50\u8282\u70B9\u4E5F\u8981\u52A0\u5165\u5230\u4E2D\uFF0C\u6240\u4EE5\u5148\u8BB0\u5F55\u5207\u7247\u957F\u5EA6\uFF1B\u5FAA\u73AF\u5F53\u524D\u5207\u7247\u957F\u5EA6\u7684\u6B21\u6570\uFF0C\u7528\u6765\u53D6\u51FA\u5F53\u524D\u5207\u7247\u7684\u5168\u90E8\u5143\u7D20\uFF1B</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// 2\u3001\u82E5\u5B58\u5728\u5DE6\u53F3\u5B69\u5B50\u8282\u70B9\uFF0C\u5219\u5C06\u5B69\u5B50\u8282\u70B9\u5165\u6808</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// 3\u3001\u6DF1\u5EA6+1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        len </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            node </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">            stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:]</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Left </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Left</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Right </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Right</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            len</span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        depth</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> depth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,12),o=[e];function r(c,t,D,y,A,C){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
